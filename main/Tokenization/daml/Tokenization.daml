-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Tokenization where

import Account 
import Asset 

--import DA.Foldable (mapA_)




--bond issuance template starts
template BondIssuance with

    issuer: Party
    custodian:Party
    name: Text
    price : Decimal
    interestRate : Decimal
    amount: Decimal
    duration : Text

  where
    signatory issuer
    observer custodian

    

    choice Accept_Custody: (ContractId AssetHoldingAccount, ( ContractId Asset,ContractId Transfer))
      with
        investor: Party
      controller custodian
        do
        let 
          
          owner = custodian
          issuerName = show issuer
         

          assetType = AssetType with
            issuer= custodian
            symbol = this.name
            fungible = True
            reference = None
            price = this.price
            interestRate = this.interestRate
            amountIssued = this.amount
            duration = this.duration
            bondIssuer = this.issuer
        -- Create Asset Holding Account
        
        contract1 <- create Account.AssetHoldingAccount with
            assetType
            owner
            airdroppable = True
            resharable = True
          
        contract2 <- exercise contract1 Airdrop with
          amount = this.amount
        

        -- Issue Assets 
     --   contract2 <- create Asset.Asset  with
       --     assetType
        --    owner
        --    amount = this.amount
        --    observers= singleton custodian
        -- Invite investor to hold accounts

        
        -- creates an account invite for all parties specified in list of investors
       -- contractAccountsInvites <- mapA_(\x -> exercise contract2 Account.Invite_New_Asset_Holder with
         -- recipient = x ) investor

        -- Bondy Custody contract created
        
        return(contract1, contract2)

--bond issuance template ends
--fetchByKey @Account (assetType, owner)
--bond custody template starts
    
--template BondCustody 
  --with 
    --custodian:Party
  --  investor: Party
    --issuerName: Text
   -- name: Text
    --price : Decimal
    --interestRate : Decimal
    --amount: Decimal
    --duration : Text
    --asset : ContractId Asset.Asset
  --where
    --signatory  custodian
    --observer  custodian,investor

   

   -- nonconsuming choice SendTokens: ()
     -- with

     -- controller custodian
     -- do

        --let 
                  
          
    --  -    assetType = AssetType with
         --   issuer= custodian
      --      symbol = this.name
          --  fungible = True
          --  reference = None

       -- (assetHoldingAccountCid,fetchedContract) <- fetchByKey @Account.AssetHoldingAccount (assetType,custodian)
        
      
        --exercise assetHoldingAccountCid Create_Transfers with
         -- assetCids = [this.asset]
          --transfers = [(this.amount, investor)]
  

        
        
                   

--bond custody template ends

--bond template starts
template Bond
  with
     
    custodian:Party
    investor:Party
    name: Text
    price : Decimal
    interestRate : Decimal
    amount: Decimal
    duration : Text
  where
    signatory investor
    observer  custodian  
    
    choice Archive_Contract: ()
      with
        
      controller investor
      do

       return()

--bond template ends
    
--setup : Script ()

--setup = script do
 -- investor <- allocateParty "investor"
  --custodian <- allocateParty "custodian"
  --issuer <- allocateParty "issuer"

  --submit issuer do
   -- createCmd BondIssuance with
    --  issuer = issuer
     -- custodian = custodian
     -- investor = investor
     -- name = "IBM Bond"
     -- price = 10.0
      --interestRate = 0.5
      --amount = 100.0
      --duration = "3 months"
  --return()